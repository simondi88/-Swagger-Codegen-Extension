{{>partial_header}}
using Microsoft.EntityFrameworkCore;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace {{packageName}}.Tests
{
    /// <summary>
    /// Helper class used for unit tests.  
    /// </summary>
    public static class MockDbSet
    {
        /// <summary>
        /// Create a list of a mock item
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="elements"></param>
        /// <returns>A mock DbSet</returns>
        public static Mock<DbSet<T>> Create<T>(params T[] elements) where T : class
        {
            return new List<T>(elements).AsDbSetMock();
        }
        
    }

    /// <summary>
    /// Helper class used for unit tests.  
    /// </summary>
    public static class MockListExtensions
    {
        /// <summary>
        /// This class is indirectly referenced by MockDbSet
        /// </summary>
        /// <typeparam name="T">The object type</typeparam>
        /// <param name="list">The list of objects</param>
        /// <returns>A mock DBSet</returns>
        public static Mock<DbSet<T>> AsDbSetMock<T>(this List<T> list) where T : class
        {
            IQueryable<T> queryableList = list.AsQueryable();
            Mock<DbSet<T>> MockDbSet = new Mock<DbSet<T>>();
            MockDbSet.As<IQueryable<T>>().Setup(x => x.Provider).Returns(queryableList.Provider);
            MockDbSet.As<IQueryable<T>>().Setup(x => x.Expression).Returns(queryableList.Expression);
            MockDbSet.As<IQueryable<T>>().Setup(x => x.ElementType).Returns(queryableList.ElementType);
            MockDbSet.As<IQueryable<T>>().Setup(x => x.GetEnumerator()).Returns(queryableList.GetEnumerator());
            return MockDbSet;
        }
    }
}
